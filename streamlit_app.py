import streamlit as st
import pandas as pd
import requests
import base64
import json
from datetime import datetime
import random as rnd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit.components.v1 as components



# üõ† GITHUB EINSTELLUNGEN (ANPASSEN)
GITHUB_USER = "JohannesProgrammes"
REPO_NAME = "wg-Jonas-Johannes"
CATEGORIES = {
    "Sp√ºlmaschine ausger√§umt": "data/sp√ºlmaschine.csv",
    "Restm√ºll rausgebracht": "data/restm√ºll.csv",
    "Biom√ºll rausgebracht": "data/biom√ºll.csv",
    "Papierm√ºll rausgebracht": "data/papierlm√ºll.csv",
    "Verpackungsm√ºll rausgebracht": "data/Verpackungsm√ºll.csv",
    "Altglas": "data/altglas.csv",
    "Backofen geputzt": "data/backofen.csv",
    "K√ºche gewischt": "data/k√ºche.csv",
    "Fenster geputzt": "data/fenster.csv",
}
diagramme = ["Sp√ºlmaschine ausger√§umt", "Altglas", "Backofen geputzt", "K√ºche gewischt"]
DIAGRAMS = {x:CATEGORIES[x] for x in diagramme}
GITHUB_TOKEN = st.secrets["GITHUB_TOKEN"]  # ‚ö† Sicher speichern!
JOHANNES_TOKEN = st.secrets["JOHANNES_TOKEN"]
JONAS_TOKEN = st.secrets["JONAS_TOKEN"]


st.set_page_config(page_title="üìä WG", page_icon="üìä")


# üõ† Erlaubte Nutzer mit Passw√∂rtern
USERS = {"Johannes": f"{JOHANNES_TOKEN}", "Jonas": f"{JONAS_TOKEN}"}

# Initialisierung von Session State
if "user" not in st.session_state:
    st.session_state["user"] = None
if "username" not in st.session_state:
    st.session_state["username"] = ""
if "password" not in st.session_state:
    st.session_state["password"] = ""
if "auto_login_attempted" not in st.session_state:
    st.session_state["auto_login_attempted"] = False


def check_login():
    username = st.session_state["username"]
    password = st.session_state["password"]
    if USERS.get(username) == password:
        st.session_state["user"] = username
        st.success(f"‚úÖ Eingeloggt als {username}")
        st.rerun()
    else:
        st.error("‚ùå Falsches Passwort!")


# Nur anzeigen, wenn nicht eingeloggt
if not st.session_state["user"]:
    # JavaScript, um das Username-Feld automatisch zu fokussieren
    components.html(
        """
        <div style="display:none;" tabindex="-1">
        <script>
        window.onload = function() {
        const inputs = window.parent.document.querySelectorAll('input[aria-label="Benutzername"]');
        if (inputs.length > 0) inputs[0].focus();
        }
        </script>
        </div>
        """,
        height=0,
    )
    st.title("üîê Login")

    with st.form("login_form"):
        username = st.text_input("Benutzername", key="username")
        password = st.text_input("Passwort", type="password", key="password")
        submitted = st.form_submit_button("Login")

    if submitted:
        st.session_state["auto_login_attempted"] = True
        check_login()

    st.stop()


# # üåê Session-Status f√ºr den eingeloggten Nutzer
# if "user" not in st.session_state:
#     st.session_state["user"] = None

# def check_login():
#     username = st.session_state["username"]
#     password = st.session_state["password"]
    
#     if USERS.get(username) == password:
#         st.session_state["user"] = username
#         st.success(f"‚úÖ Eingeloggt als {username}")
#     else:
#         st.error("‚ùå Falsches Passwort!")

# # üîê Login-Formular anzeigen, wenn nicht eingeloggt
# if not st.session_state["user"]:
#     st.title("üîê Login erforderlich")

#     # Benutzername und Passwort als Eingabefelder
#     username = st.text_input("Benutzername", key="username")
#     password = st.text_input("Passwort", type="password", key="password", on_change=check_login)

#     # Login-Button
#     if st.button("Login"):
#         check_login()

#     st.stop()  # üö´ Stoppt die Ausf√ºhrung der App, solange kein Login erfolgt ist



# üåü Hier beginnt deine App (wird nur nach Login angezeigt!)

# Eingeloggten Benutzer abrufen
user = st.session_state["user"]
users = [user] + [person for person in ["Jonas", "Johannes", "Heinzelm√§nnchen"] if not person == user]

if st.button("Abmelden"):
    st.session_state["user"] = None
    st.rerun()


# üìÖ Funktion: CSV aus GitHub laden
def load_data(csv_path):
    url = f"https://api.github.com/repos/{GITHUB_USER}/{REPO_NAME}/contents/{csv_path}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        file_content = response.json()["content"]
        decoded_content = base64.b64decode(file_content).decode("utf-8")
        return pd.read_csv(pd.io.common.StringIO(decoded_content)), response.json()["sha"]
    else:
        return pd.DataFrame(columns=["Datum", "Account", "Name"]), None

# üìÑ Funktion: CSV in GitHub speichern
def save_data(df, sha, csv_path):
    df, sha = load_data(CATEGORIES[kategorie])
    url = f"https://api.github.com/repos/{GITHUB_USER}/{REPO_NAME}/contents/{csv_path}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    
    csv_content = df.to_csv(index=False).encode("utf-8")
    encoded_content = base64.b64encode(csv_content).decode("utf-8")
    
    data = {
        "message": f"Update {csv_path}",
        "content": encoded_content,
        "sha": sha  # Datei aktualisieren
    }
    
    response = requests.put(url, headers=headers, data=json.dumps(data))
    
    if response.status_code in [200, 201]:
        st.success("Antwort gespeichert! ‚úÖ")
    else:
        st.error(f"Fehler beim Speichern: {response.json()}")





# üåü Streamlit UI
#st.set_page_config(page_title="üìä WG", page_icon="üìä")
st.title("üìä WG Eifelstra√üe")
st.write(f"Hallo {user}!")
st.write("W√§hle deinen Namen und eine Aktivit√§t aus:")


# üìä Auswahl der Eingaben
name = st.selectbox("W√§hle deinen Namen", users)
kategorie = st.selectbox("W√§hle eine Aktivit√§t", list(CATEGORIES.keys()))

# Daten aus GitHub laden
df, sha = load_data(CATEGORIES[kategorie])
df, sha = load_data("data/sp√ºlmaschine.csv")

# ‚úÖ Antwort speichern nur bei Button-Klick
if st.button("Aktion eintragen"):
    now = datetime.now().strftime("%d.%m.%Y, %H:%M Uhr")
    new_data = pd.DataFrame([[now, user, name]], columns=df.columns)
    df = pd.concat([df, new_data], ignore_index=True)
    save_data(df, sha, CATEGORIES[kategorie])




# Daten initialisieren
personen = ["Johannes", "Jonas"]
werte = [0, 0]  # Beispielzahlen f√ºr die zwei Personen

# Daten aus GitHub laden
df, sha = load_data(CATEGORIES[kategorie])
df, sha = load_data("data/sp√ºlmaschine.csv")
#st.dataframe(df)
matrix = df.to_numpy()
for zeile in matrix:
    if zeile[2] == "Johannes":
        werte[0] += 1
    if zeile[2] == "Jonas":
        werte[1] += 1


print(werte)
if user == "Johannes":
    if werte[0] > werte[1]:
        st.write(f"### Jonas muss noch {abs(werte[0]-werte[1])} mal die Sp√ºlmaschine ausr√§umen")
    elif werte[0] < werte[1]:
        st.write(f"### Du musst noch {abs(werte[0]-werte[1])} mal die Sp√ºlmaschine ausr√§umen")
    else:
        st.write(f"### Jeder muss die Sp√ºlmaschine ausr√§umen, denn es ist Gleichstand")
elif user == "Jonas":
    if werte[0] > werte[1]:
        st.write(f"### Du musst noch {abs(werte[0]-werte[1])} mal die Sp√ºlmaschine ausr√§umen")
    elif werte[0] < werte[1]:
        st.write(f"### Johannes muss noch {abs(werte[0]-werte[1])} mal die Sp√ºlmaschine ausr√§umen")
    else:
        st.write(f"### Jeder muss die Sp√ºlmaschine ausr√§umen, denn es ist Gleichstand")
else:
    if werte[0] > werte[1]:
        st.write(f"### Jonas muss noch {abs(werte[0]-werte[1])} mal die Sp√ºlmaschine ausr√§umen")
    elif werte[0] < werte[1]:
        st.write(f"### Johannes muss noch {abs(werte[0]-werte[1])} mal die Sp√ºlmaschine ausr√§umen")
    else:
        st.write(f"### Jeder muss die Sp√ºlmaschine ausr√§umen, denn es ist Gleichstand")





# üìä Ergebnisse sofort anzeigen
st.write(f"### Antworten f√ºr das Thema Sp√ºlmaschine ausger√§umt")
#st.write(f"Die anderen sieht man hier nicht")
st.dataframe(df)
matrix = df.to_numpy()
print(matrix)


# var_zahl = rnd.randint(0,100)
# alter = st.slider("Hier ein Slider zum rumspielen", 0, 100, 69)


#st.stop()


# Erstelle einen Pandas DataFrame f√ºr das Balkendiagramm
df = pd.DataFrame({
    'Personen': personen,
    'Werte': werte
})

# Horizontale Auswahl f√ºr Kategorien
# kategorie = st.radio(
#     "W√§hle eine Kategorie",
#     ["Sp√ºlmaschine ausger√§umt", "Restm√ºll rausgebracht", "Biom√ºll rausgebracht", "Papierm√ºll rausgebracht", "Altglas"],
#     horizontal=True
# )

# Balkendiagramm erstellen
st.subheader(f"Balkendiagramm: {kategorie}")
st.bar_chart(df.set_index('Personen'))



st.stop()


# Weitere Interaktionen, je nach Auswahl
if kategorie == "Sp√ºlmaschine ausger√§umt":
    st.write("Hier kannst du die Daten zur Sp√ºlmaschine sehen...")
elif kategorie == "Restm√ºll rausgebracht":
    st.write("Hier kannst du die Daten zum Restm√ºll sehen...")
elif kategorie == "Biom√ºll rausgebracht":
    st.write("Hier kannst du die Daten zum Biom√ºll sehen...")
elif kategorie == "Papierm√ºll rausgebracht":
    st.write("Hier kannst du die Daten zum Papierm√ºll sehen...")
else:
    st.write("Hier kannst du die Daten zum Altglas sehen...")


# Erstelle einen Pandas DataFrame f√ºr das Balkendiagramm
df = pd.DataFrame({'Personen': personen, 'Werte': werte})

# üé® Seaborn-Theme f√ºr sch√∂neres Design
sns.set_theme(style="whitegrid")

# üìå Dropdown f√ºr Kategorien (anstelle von radio)
kategorie = st.selectbox(
    "W√§hle eine Kategorie",
    ["Sp√ºlmaschine ausger√§umt", "Restm√ºll rausgebracht", "Biom√ºll rausgebracht", "Papierm√ºll rausgebracht", "Altglas"]
)

# üèÜ Sch√∂neres Balkendiagramm mit Matplotlib
st.subheader(f"Balkendiagramm: {kategorie}")

fig, ax = plt.subplots(figsize=(6, 4))
colors = ["#4CAF50", "#FF9800"]  # Gr√ºn & Orange f√ºr die Balken

bars = ax.bar(df["Personen"], df["Werte"], color=colors, edgecolor="black", linewidth=1.2)

# üé® Runde Ecken f√ºr Balken (funktioniert nur mit Patch-Objekten in Matplotlib)
for bar in bars:
    bar.set_linewidth(0)  # Entfernt harte Kanten
    bar.set_alpha(0.9)  # Leichte Transparenz
    bar.set_capstyle('round')  # Runde Balken-Ecken

# Achsen entfernen f√ºr cleanen Look
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['left'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.set_xticklabels(df["Personen"], fontsize=12)
ax.set_yticks([])  # Entfernt Zahlen auf Y-Achse f√ºr cleanes Design

st.pyplot(fig)

# üîç Extra Infos zur gew√§hlten Kategorie
st.write(f"Details zur Kategorie **{kategorie}** kommen hier...")




kategorie = st.selectbox("W√§hle eine Aktivit√§t", diagramme)

# Beispiel-Daten
data = pd.DataFrame({
    "Person": ["Johannes", "Jonas"],
    "Aktionen": [10, 7]
}).set_index("Person")

# Balkendiagramm in Streamlit
st.bar_chart(data)




fig, ax = plt.subplots()
personen = ["Johannes", "Jonas"]
werte = [10, 7]

bars = ax.bar(personen, werte, color=["royalblue", "tomato"], edgecolor="black")

# Runde Balken-Ecken simulieren
for bar in bars:
    bar.set_linewidth(2)
    bar.set_alpha(0.9)
    bar.set_linestyle("solid")
    bar.set_capstyle("round")  # Macht die Kanten weicher

ax.set_title("üí° Aktionen im √úberblick")
ax.set_ylabel("Anzahl")
ax.set_ylim(0, max(werte) + 5)

st.pyplot(fig)




def johannes(daten):
    namen, counts = np.unique(daten[:, 2], return_counts=True)
    if "Johannes" in namen:
        return 

    name_counts = dict(zip(namen, counts))
    print(name_counts, namen, counts)
    print(name_counts["Johannes"])
    sorted_counts = dict(sorted(name_counts.items(), key=lambda item: item[1], reverse=True))
    print(sorted_counts)


# Beispiel-Daten
df = pd.DataFrame({
    "Johannes": [3, 2, 4],
    "Jonas": [1, 5, 2]
}, index=["Kategorie A", "Kategorie B", "Kategorie C"])

# Balkendiagramm
st.bar_chart(df)